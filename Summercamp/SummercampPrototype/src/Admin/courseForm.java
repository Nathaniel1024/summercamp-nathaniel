package Admin;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import net.proteanit.sql.DbUtils;

public class courseForm extends javax.swing.JInternalFrame {

    // SQL query string to hold various SQL commands
    String sql;

    // ResultSet object to store and manage data retrieved from the database
    ResultSet rs;

    // Connection object to establish a connection to the database
    Connection con;

    // PreparedStatement object to create and execute parameterized SQL queries
    PreparedStatement pst;
    
    // Constructor for the gradeForm class
    public courseForm() {
        // Initialize the form components (this method is auto-generated by GUI builders of NetBeans)
        initComponents();
        
        // Set the form location relative to the screen size

        // Get the toolkit object for the current screen
        Toolkit toolkit = getToolkit();

        // Get the screen size (width and height) of the current display
        Dimension size = toolkit.getScreenSize();

        // Set the form location to a custom position (centered horizontally, slightly higher vertically)
        setLocation(size.width / 10 - getWidth() / 10, size.height / 5 - getHeight() / 4);

        // Display the data in the table when the form is loaded
        DisplayTable();
    }
    
    private void tblHeader() {
        // Customize the appearance and layout of the table header in tblCourse

        // Get the table header of tblCourse
        JTableHeader thead = tblCourse.getTableHeader();

        // Set the text color of the table header to blue
        thead.setForeground(Color.BLUE);

        // Set the font of the table header to bold Tahoma, size 14
        thead.setFont(new Font("Tahoma", Font.BOLD, 14));

        // Customize the width of the first column (assumed to be 'Course')
        TableColumn col = tblCourse.getColumnModel().getColumn(0);
        col.setPreferredWidth(200); // Set preferred width for the first column

        // Customize the width of the second column (assumed to be 'Slot')
        TableColumn col1 = tblCourse.getColumnModel().getColumn(1);
        col1.setPreferredWidth(20); // Set preferred width for the second column
    }

    
    private void DisplayTable() {
        // Fetch data from the 'inventory' table and display it in the tblCourse JTable

        try {
            // Load MySQL JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Establish connection to the MySQL database
            Connection con = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/summercamp?zeroDateTimeBehavior=convertToNull&serverTimezone=UTC", 
                "root", 
                "Java@2024"
            );

            // SQL query to select the 'course' and 'slot' columns from the 'inventory' table
            String sql = "SELECT course AS 'Course', slot AS 'Slot' FROM inventory";
            PreparedStatement st = con.prepareStatement(sql);

            // Execute the query and retrieve the result set
            ResultSet rs = st.executeQuery();

            // Populate the tblCourse JTable with the result set using DbUtils to convert it to a table model
            tblCourse.setModel(DbUtils.resultSetToTableModel(rs));

            // Customize the table header (optional method call for setting column names, widths, etc.)
            tblHeader();

        } catch (Exception e) {
            // Handle any exceptions by displaying an error message
            JOptionPane.showMessageDialog(null, e);
        }
    }

    
    private void ClearFields(){
        // Clear the input fields by setting the text of txtCourse and txtSlot to an empty string

        // Clear the 'Course' field
        txtCourse.setText("");

        // Clear the 'Slot' field
        txtSlot.setText("");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtCourse = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCourse = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txtSlot = new javax.swing.JTextField();

        setClosable(true);
        setTitle("Course");

        jPanel1.setBackground(new java.awt.Color(253, 177, 4));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Enter Course Name");

        txtCourse.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        txtCourse.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/course.gif"))); // NOI18N
        jLabel2.setText("jLabel2");

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnUpdate.setText("UPDATE");
        btnUpdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUpdateMouseClicked(evt);
            }
        });

        btnCreate.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnCreate.setText("CREATE");
        btnCreate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCreateMouseClicked(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnDelete.setText("DELETE");
        btnDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDeleteMouseClicked(evt);
            }
        });

        tblCourse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course", "Slot"
            }
        ));
        tblCourse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCourseMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCourse);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 507, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel3.setText("Enter number of Slot");

        txtSlot.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        txtSlot.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(395, 395, 395)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtSlot, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel3)
                                            .addGap(36, 36, 36))))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(73, 73, 73)
                                    .addComponent(jLabel1))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(btnCreate)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnUpdate)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(149, 149, 149)
                                .addComponent(btnDelete)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(txtSlot, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCreate)
                            .addComponent(btnUpdate))
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCreateMouseClicked
        
        // Handling the click event for the 'Create' button to save a record into the database

        // Validate that the 'Course' and 'Slot' fields are not empty
        if (txtCourse.getText().trim().isEmpty() || txtSlot.getText().trim().isEmpty()) {
            // Show an error message if either field is empty
            JOptionPane.showMessageDialog(rootPane, "Fields must not be empty");
        } else {
            try {
                // Load the MySQL JDBC driver
                Class.forName("com.mysql.cj.jdbc.Driver");

                // Establish a connection to the MySQL database (change credentials as needed)
                con = DriverManager.getConnection("jdbc:mysql://localhost:3306/summercamp?zeroDateTimeBehavior=convertToNull&serverTimezone=UTC", 
                                                  "root", "Java@2024");

                // Prepare an SQL INSERT query to save the new record to the 'inventory' table
                String sql = "INSERT INTO inventory (course, slot) VALUES (?, ?)";
                pst = con.prepareStatement(sql);

                // Set the values for the query from the input fields (course and slot)
                pst.setString(1, txtCourse.getText());
                pst.setString(2, txtSlot.getText());

                // Execute the SQL query and get the result (1 indicates success)
                int k = pst.executeUpdate();

                // Check if the record was successfully inserted
                if (k == 1) {
                    // Show success message and update the table view, clear fields
                    JOptionPane.showMessageDialog(null, "New record has been saved in the database");
                    DisplayTable();  // Refresh the table display
                    ClearFields();   // Clear the input fields
                    txtCourse.setEditable(false); // Disable editing for 'Course'
                    txtSlot.setEditable(false);   // Disable editing for 'Slot'
                }

                // Close the database connection
                con.close();
            } catch (Exception e) {
                // Display any errors that occur during the database interaction
                JOptionPane.showMessageDialog(null, e);
            }
        }
        
    }//GEN-LAST:event_btnCreateMouseClicked

    private void btnUpdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpdateMouseClicked
        // Handling the 'Update' button click event to modify a selected record in the database

        // Ensure that the 'Course' and 'Slot' fields are not empty
        if (txtCourse.getText().trim().isEmpty() || txtSlot.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Fields must not be empty");
            return; // Exit the method if either field is empty
        }

        try {
            // Load the MySQL JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Establish a connection to the MySQL database
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/summercamp?zeroDateTimeBehavior=convertToNull&serverTimezone=UTC", 
                                              "root", "Java@2024");

            // Get the selected row index from the table
            int selectedRow = tblCourse.getSelectedRow();

            // If no row is selected, show a warning message and exit the method
            if (selectedRow < 0) {
                JOptionPane.showMessageDialog(rootPane, "Please select a row to update");
                return;
            }

            // Get the table model and check the number of columns
            DefaultTableModel updateTable = (DefaultTableModel) tblCourse.getModel();
            int columnCount = updateTable.getColumnCount();

            // Ensure the table has exactly 2 columns (Course and Slot)
            if (columnCount != 2) {
                JOptionPane.showMessageDialog(rootPane, "Table does not have the expected number of columns");
                return;
            }

            // Retrieve the old data from the selected row
            String oldCourse = updateTable.getValueAt(selectedRow, 0).toString(); // Old course value
            String oldSlot = updateTable.getValueAt(selectedRow, 1).toString();   // Old slot value

            // Get the new data from the input fields
            String newCourse = txtCourse.getText();
            String newSlot = txtSlot.getText();

            // Check if the new values are the same as the old values (i.e., no changes)
            if (oldCourse.equals(newCourse) && oldSlot.equals(newSlot)) {
                JOptionPane.showMessageDialog(rootPane, "No changes detected");
                return; // Exit the method if no changes are made
            }

            // Ask for user confirmation before proceeding with the update
            int response = JOptionPane.showConfirmDialog(
                rootPane,
                "Are you sure you want to update this record?",
                "Confirm Update",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
            );

            // If the user selects 'NO', exit the method
            if (response == JOptionPane.NO_OPTION) {
                return;
            }

            // Prepare an SQL query to update the selected record in the 'inventory' table
            String sql = "UPDATE inventory SET course = ?, slot = ? WHERE course = ? AND slot = ?";
            pst = con.prepareStatement(sql);

            // Set the parameters for the query (new and old values)
            pst.setString(1, newCourse);
            pst.setString(2, newSlot);
            pst.setString(3, oldCourse);
            pst.setString(4, oldSlot);

            // Execute the update query and check if a record was updated
            int k = pst.executeUpdate();

            if (k == 1) {
                // If the update is successful, show a success message and refresh the table
                JOptionPane.showMessageDialog(null, "Record has been updated successfully");
                DisplayTable();  // Refresh the table display to reflect the changes
                ClearFields();   // Clear the input fields
                txtCourse.setEditable(false); // Disable editing for 'Course'
                txtSlot.setEditable(false);   // Disable editing for 'Slot'
            } else {
                // If no record was updated, show a warning message
                JOptionPane.showMessageDialog(null, "Record not found or not updated");
            }

            // Close the database connection
            con.close();
        } catch (Exception e) {
            // Catch and display any errors that occur during the database interaction
            JOptionPane.showMessageDialog(null, e);
        }
        
    }//GEN-LAST:event_btnUpdateMouseClicked

    private void tblCourseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCourseMouseClicked
        // Handling the mouse click event on the tblCourse table to load the selected row's data into the input fields for updating

        // Get the table model of tblCourse
        DefaultTableModel updatetable = (DefaultTableModel) tblCourse.getModel();

        // Get the index of the selected row
        int rows = tblCourse.getSelectedRow();

        // Retrieve the 'Course' value from the first column of the selected row and set it to txtCourse
        txtCourse.setText(updatetable.getValueAt(rows, 0).toString());

        // Retrieve the 'Slot' value from the second column of the selected row and set it to txtSlot
        txtSlot.setText(updatetable.getValueAt(rows, 1).toString());

        // Enable and allow editing for the 'Course' field to prepare for potential updates
        txtCourse.setEditable(true);
        txtCourse.setEnabled(true);

        // Enable and allow editing for the 'Slot' field to prepare for potential updates
        txtSlot.setEditable(true);
        txtSlot.setEnabled(true);
        
    }//GEN-LAST:event_tblCourseMouseClicked

    private void btnDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseClicked
        // Handling the mouse click event for deleting a selected row from the tblCourse table and database

        // Ensure that a row is selected from the table
        int selectedRow = tblCourse.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(rootPane, "Please select a row to delete");
            return; // Exit the method if no row is selected
        }

        // Retrieve the 'Course' and 'Slot' values from the selected row for deletion
        DefaultTableModel deleteTable = (DefaultTableModel) tblCourse.getModel();
        String course = deleteTable.getValueAt(selectedRow, 0).toString();
        String slot = deleteTable.getValueAt(selectedRow, 1).toString();

        // Confirm the deletion with the user through a dialog box
        int confirm = JOptionPane.showConfirmDialog(
            rootPane,
            "Are you sure you want to delete this record?", 
            "Confirm Delete", 
            JOptionPane.YES_NO_OPTION
        );

        // If the user selects 'No', exit the method
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        try {
            // Establish connection to the MySQL database
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/summercamp?zeroDateTimeBehavior=convertToNull&serverTimezone=UTC", "root", "Java@2024");

            // Prepare SQL query to delete the record based on the 'Course' and 'Slot' values
            String sql = "DELETE FROM inventory WHERE course = ? AND slot = ?";
            pst = con.prepareStatement(sql);

            // Set the parameters for the query
            pst.setString(1, course);
            pst.setString(2, slot);

            // Execute the deletion query and check if the deletion was successful
            int k = pst.executeUpdate();

            if (k == 1) {
                // If one row is affected, show success message and refresh the table to reflect the changes
                JOptionPane.showMessageDialog(null, "Record has been deleted successfully");
                DisplayTable(); // Refresh the table to reflect updated data
                ClearFields();  // Clear the input fields after deletion
            } else {
                // If no record was deleted, show an error message
                JOptionPane.showMessageDialog(null, "Record not found or not deleted");
            }

            // Close the database connection
            con.close();
        } catch (Exception e) {
            // Handle any errors that occur during the process
            JOptionPane.showMessageDialog(null, e);
        }
       
    }//GEN-LAST:event_btnDeleteMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCourse;
    private javax.swing.JTextField txtCourse;
    private javax.swing.JTextField txtSlot;
    // End of variables declaration//GEN-END:variables
}
